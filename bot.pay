from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler

BOT_TOKEN = "8171906064:AAHpMx6PBOz951iy0hQpJdgSdkP_CqRQGyk"
MAIN_CHANNEL = "@Clicktelegrammember"
ORDER_CHANNEL = "@clickmemberorder"

user_balance = {}

def start(update: Update, context: CallbackContext):
    user = update.effective_user
    keyboard = [
        [InlineKeyboardButton("тЬЕ Join Channel", url=f"https://t.me/{MAIN_CHANNEL[1:]}")],
        [InlineKeyboardButton("ЁЯФД I've Joined", callback_data="joined")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        f"ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ {user.first_name}!\n\nржжрзЯрж╛ ржХрж░рзЗ ржкрзНрж░ржержорзЗ ржЖржорж╛ржжрзЗрж░ ржорзЗржЗржи ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬрзЯрзЗржи ржХрж░рзБржи тмЗя╕П",
        reply_markup=reply_markup
    )

def joined(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    keyboard = [
        [InlineKeyboardButton("ЁЯЫТ Order Member", callback_data="order_member")],
        [InlineKeyboardButton("ЁЯТ░ Buy Coin", callback_data="buy_coin")],
        [InlineKeyboardButton("ЁЯСд My Account", callback_data="my_account")],
        [InlineKeyboardButton("ЁЯОп Refer & Earn", callback_data="refer")],
        [InlineKeyboardButton("ЁЯУЮ Support", callback_data="support")]
    ]
    query.edit_message_text("тЬЕ ржзржирзНржпржмрж╛ржж! ржЖржкржирж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЬрзЯрзЗржи ржХрж░рзЗржЫрзЗржиред\n\nржирж┐ржЪрзЗ ржерзЗржХрзЗ ржПржХржЯрж┐ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржи ЁЯСЗ", 
                            reply_markup=InlineKeyboardMarkup(keyboard))

def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data == "order_member":
        query.edit_message_text("ЁЯФ░ржЖржкржирж╛рж░ Channel / Group link ржжрж┐ржи:")
        context.user_data["step"] = "get_link"

    elif query.data == "buy_coin":
        query.edit_message_text("ржкрзНрж░рждрж┐ рззрзжрзжрзж ржХрзЯрзЗржирзЗрж░ ржжрж╛ржо рззрзл ржЯрж╛ржХрж╛ред ржирж┐рждрзЗ ржиржХ ржжрж┐ржи ЁЯСЙ @Tamim66184")

    elif query.data == "support":
        query.edit_message_text("ржпрзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛рж░ ржЬржирзНржп: @Tamim66184")

    elif query.data == "my_account":
        user = query.from_user
        balance = user_balance.get(user.id, 0)
        query.edit_message_text(
            f"ЁЯз╛ Your Account Information:\n\n"
            f"ЁЯСд Name: {user.first_name}\n"
            f"ЁЯФЧ Username: @{user.username}\n"
            f"ЁЯЖФ User ID: {user.id}\n\n"
            f"ЁЯТ░ Total Balance: {balance} Coins"
        )

    elif query.data == "refer":
        user = query.from_user
        query.edit_message_text(
            f"ЁЯФ░ ржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░ ржЖржкржирж┐ 50 ржкржпрж╝рзЗржирзНржЯ ржкрж╛ржмрзЗржи ЁЯдЧ\n\nЁЯУМ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржЩрзНржХ:\n"
            f"https://t.me/{context.bot.username}?start={user.id}\n\n"
            "тЪая╕П ржЖржкржирж┐ рждржЦржиржЗ ржкржпрж╝рзЗржирзНржЯ ржкрж╛ржмрзЗржи ржпржЦржи ржЖржкржирж╛рж░ ржЖржоржирзНрждрзНрж░рж┐ржд ржмрзНржпржХрзНрждрж┐ ржЖржорж╛ржжрзЗрж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрзЗржмрзЗржиред"
        )

def handle_message(update: Update, context: CallbackContext):
    user = update.effective_user
    text = update.message.text

    if context.user_data.get("step") == "get_link":
        context.user_data["link"] = text
        update.message.reply_text(
            "ржЖржкржирж┐ ржХржд ржорзЗржорзНржмрж╛рж░ ржХрж┐ржирждрзЗ ржЪрж╛ржи?\n\n"
            "100 - 300 ЁЯкЩ\n200 - 600 ЁЯкЩ\n500 - 1100 ЁЯкЩ\n1K - 2000 ЁЯкЩ\n\nрж▓рж┐ржЦрзБржи ржЙржжрж╛рж╣рж░ржг: 100"
        )
        context.user_data["step"] = "get_member"

    elif context.user_data.get("step") == "get_member":
        try:
            count = int(text)
            cost = {100:300, 200:600, 500:1100, 1000:2000}.get(count, None)
            balance = user_balance.get(user.id, 0)
            if not cost:
                update.message.reply_text("ржнрзБрж▓ рж╕ржВржЦрзНржпрж╛ ржжрж┐рзЯрзЗржЫрзЗржиред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
                return
            if balance < cost:
                update.message.reply_text("тЭМ ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржкрж░рзНржпрж╛ржкрзНржд ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржирзЗржЗред")
                return

            user_balance[user.id] = balance - cost
            context.bot.send_message(
                chat_id=ORDER_CHANNEL,
                text=f"ЁЯЖХ ржирждрзБржи ржЕрж░рзНржбрж╛рж░!\n\nChannel link: {context.user_data['link']}\nMember cost: {count}\nUsername: @{user.username}"
            )
            update.message.reply_text("тЬЕ ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржзржирзНржпржмрж╛ржж!")

        except ValueError:
            update.message.reply_text("ржжрзЯрж╛ ржХрж░рзЗ рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржи (ржпрзЗржоржи: 100)ред")

updater = Updater(BOT_TOKEN)
dp = updater.dispatcher

dp.add_handler(CommandHandler("start", start))
dp.add_handler(CallbackQueryHandler(button))
dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
dp.add_handler(CallbackQueryHandler(joined, pattern="joined"))

updater.start_polling()
updater.idle()
